<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Get Started on </title>
    <link>https://frisbee.dev/docs/getting-started/</link>
    <description>Recent content in Get Started on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://frisbee.dev/docs/getting-started/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quick Start</title>
      <link>https://frisbee.dev/docs/getting-started/quick-start/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/quick-start/</guid>
      <description>This document describes how to quickly start Frisbee in a test or local environment.
Step 1. Environment preparation Please ensure that the Kubernetes cluster and Helm package manager are deployed before the trial. If they are, go to Step 2.
# Install microk8s v.1.24 &amp;gt;&amp;gt; sudo snap install microk8s --classic --channel=1.24/stable # Use microk8s config as the default kubernetes config &amp;gt;&amp;gt; microk8s config &amp;gt; ~/.kube/config # Start microk8s &amp;gt;&amp;gt; microk8s start # Enable Dependencies &amp;gt;&amp;gt; microk8s enable dns ingress helm3 # Create aliases &amp;gt;&amp;gt; sudo snap alias microk8s.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://frisbee.dev/docs/getting-started/hello-world/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/hello-world/</guid>
      <description>Let&#39;s start by creating a very simple workflow template to echo &amp;quot;hello world&amp;quot; using the docker/whalesay container image from Docker Hub.
You can run this directly from your shell with a simple docker command:
$ docker run docker/whalesay cowsay &amp;#34;hello world&amp;#34; _____________ &amp;lt; hello world &amp;gt; ------------- \ \ \ ## . ## ## ## == ## ## ## ## === /&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;___/ === ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ / ===- ~~~ \______ o __/ \ \ __/ \____\______/ Hello from Docker!</description>
    </item>
    
    <item>
      <title>Parameters</title>
      <link>https://frisbee.dev/docs/getting-started/parameters/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/parameters/</guid>
      <description>Let&#39;s look at a slightly more complex workflow spec with parameters.
Parameterized Template apiVersion: frisbee.dev/v1alpha1 kind: Template	metadata: name: whalesay	spec: # invoke the whalesay template with # &amp;#34;hello world&amp;#34; as the default argument # to the message parameter inputs:	parameters: message: &amp;#34;hello-world&amp;#34; service: containers: - name: app image: docker/whalesay command: [cowsay] args: [{{&amp;#34;{{.Inputs.Parameters.message&amp;#34;}}] This time, the whalesay template takes an input parameter named message that is passed as the args to the cowsay command.</description>
    </item>
    
    <item>
      <title>Clustering</title>
      <link>https://frisbee.dev/docs/getting-started/clustering/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/clustering/</guid>
      <description>When writing testing scenarios, it is often very useful to be able to run multiple services in a shared execution context.
Create Clustered Services There are two ways to create services in a cluster: by instances and by inputs.
By instances apiVersion: frisbee.dev/v1alpha1 kind: Scenario metadata: name: whales-say spec: actions: - action: Cluster	name: whales-say cluster: templateRef: whalesay instances: 4	# number of services The above snippet will create 4 identical services initialized with the default values of the whalesay template.</description>
    </item>
    
    <item>
      <title>Dependencies</title>
      <link>https://frisbee.dev/docs/getting-started/dependencies/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/dependencies/</guid>
      <description>Frisbee allows you to define the workflow as a directed-acyclic graph (DAG) by specifying the dependencies of each task. This can be simpler to maintain for complex workflows and allows for a greater range of test-cases.
Run Sequentially In the following workflow, step A runs first, as it has no dependencies. Once A has finished, steps B and C run in parallel. Finally, once B and C have completed, step D can run.</description>
    </item>
    
    <item>
      <title>Naming and Addressing</title>
      <link>https://frisbee.dev/docs/getting-started/naming/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/naming/</guid>
      <description>In contrast to other Workflow enginers like Argo that use dynamically generated names, all objects in Frisbee follow a predictable naming pattern. This makes it possible to create communicating services.
Reference an Object In case of communicating services, such as a client-server architecture, we need the client to know the name of the server in other to establish a communication case.
apiVersion: frisbee.dev/v1alpha1 kind: Scenario metadata: name: server-client spec: actions: - action: Service name: server service: templateRef: iperf2.</description>
    </item>
    
  </channel>
</rss>
