<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on </title>
    <link>https://frisbee.dev/docs/</link>
    <description>Recent content in Docs on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://frisbee.dev/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Frisbee Documentation</title>
      <link>https://frisbee.dev/docs/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/documentation/</guid>
      <description>The effort being put in automating tests should not take over delivering value to users. Frisbee makes it possible to:
Setup initial dependency stack – easily!
Test against actual, close to production software - no mocks!
Replay complex workloads written in an intuitive language!
Combine Chaos Engineering with large-scale performance testing!
Assert actual program behavior and side effects
Below you will find some of the most common and helpful pages from our documentation.</description>
    </item>
    
    <item>
      <title>Develop a new Chart For Frisbee</title>
      <link>https://frisbee.dev/docs/chart-guide/develop/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/chart-guide/develop/</guid>
      <description>This is a guide for those who wish to contribute new Charts in Frisbee.
Because there is an overlap, we advise you to have a look at the Guide for Code Developers first.
What is a Helm Chart ? Helm is a package manager for Kubernetes.
Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of Kubernetes resources. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.</description>
    </item>
    
    <item>
      <title>Frequently Asked Questions</title>
      <link>https://frisbee.dev/docs/troubleshooting/faq/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/troubleshooting/faq/</guid>
      <description>What is Frisbee ? Frisbee is a test-suite for Kubernetes.
The service seems fine, but I get a Failed message. The service run in a Pod that may host multiple containers. The application contrainer, the telemetry container, and so on. Given that, if the application seems fine, it is perhaps one of the sidecar containers that has failed.
I changed some templates, but the changes does not seem to affect the Test Plan.</description>
    </item>
    
    <item>
      <title>Tools for debugging</title>
      <link>https://frisbee.dev/docs/troubleshooting/tools/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/troubleshooting/tools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Chart Guide</title>
      <link>https://frisbee.dev/docs/chart-guide/deploy/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/chart-guide/deploy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What is Frisbee</title>
      <link>https://frisbee.dev/docs/about/what-is-frisbee/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/about/what-is-frisbee/</guid>
      <description>What Does Frisbee Do? Setup initial dependency stack – easily!
Test against actual, close to production software - no mocks!
Replay complex workloads written in an intuitive language!
Combine Chaos Engineering with large-scale performance testing!
Assert actual program behavior and side effects
Who Should Use Frisbee? Frisbee is intended for engineers and researchers looking to invent, build, verify, evaluate, and release distributed systems faster and more reliably.
Use cases include:</description>
    </item>
    
    <item>
      <title>Basic Features</title>
      <link>https://frisbee.dev/docs/about/features/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/about/features/</guid>
      <description>This document describes the basic features of Frisbee, including Actions, Testing Workflows, Visualized Operations, and Security Guarantees.
Actions An Action is the key to defining a DSL for replaying complex workloads. Frisbee covers a full range of actions required to test a distributed system, and consists of five comprehensive and fine-grained components: templates, services, clusters, faults, and calls.
Templates: Templates define minimally constraining skeletons. When called with `input&#39; parameters, templates generate the customized configuration by replacing the placeholders with the given input.</description>
    </item>
    
    <item>
      <title>Apache License</title>
      <link>https://frisbee.dev/docs/about/license/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/about/license/</guid>
      <description>Version 2.0, January 2004 https://www.apache.org/licenses/LICENSE-2.0
Terms and Conditions for use, reproduction, and distribution
1. Definitions “License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.
“Legal Entity” shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://frisbee.dev/docs/code-developer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/code-developer/</guid>
      <description>Guide for the Frisbee Platform Developers Change the Code Make a new release Step 1: Change the version in the VERSION file Step 2: Update the controller&#39;s container Step 3: Update the Github repo Step 4: Create GitHub release Step 5: Validate release Change the Code # Fetch Frisbee &amp;gt;&amp;gt; git clone git@github.com:CARV-ICS-FORTH/frisbee.git &amp;gt;&amp;gt; cd frisbee There are two ways to run a Frisbee controller.
As Go program outside a cluster.</description>
    </item>
    
  </channel>
</rss>
