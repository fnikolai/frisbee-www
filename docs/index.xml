<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Get Started on </title>
    <link>https://frisbee.dev/docs/</link>
    <description>Recent content in Get Started on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://frisbee.dev/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Frisbee Documentation</title>
      <link>https://frisbee.dev/docs/documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/documentation/</guid>
      <description>The effort being put in automating tests should not take over delivering value to users. Frisbee makes it possible to:
Setup initial dependency stack – easily!
Test against actual, close to production software - no mocks!
Replay complex workloads written in an intuitive language!
Combine Chaos Engineering with large-scale performance testing!
Assert actual program behavior and side effects
Below you will find some of the most common and helpful pages from our documentation.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>https://frisbee.dev/docs/getting-started/quick-start/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/quick-start/</guid>
      <description>Step 1: Install Kubernetes and &amp;amp; Helm Microk8s is the simplest production-grade conformant K8s. It runs entirely on your workstation or edge device.
Helm is a package manager for Kubernetes. Helm uses a packaging format called charts.
# Install microk8s v.1.24 &amp;gt;&amp;gt; sudo snap install microk8s --classic --channel=1.24/stable # Use microk8s config as the default kubernetes config &amp;gt;&amp;gt; microk8s config &amp;gt; ~/.kube/config # Start microk8s &amp;gt;&amp;gt; microk8s start # Enable Dependencies &amp;gt;&amp;gt; microk8s enable dns ingress helm3 # Create aliases &amp;gt;&amp;gt; sudo snap alias microk8s.</description>
    </item>
    
    <item>
      <title>Develop a new Chart For Frisbee</title>
      <link>https://frisbee.dev/docs/chart-guide/develop/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/chart-guide/develop/</guid>
      <description>This is a guide for those who wish to contribute new Charts in Frisbee.
Because there is an overlap, we advise you to have a look at the Guide for Code Developers first.
What is a Helm Chart ? Helm is a package manager for Kubernetes.
Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of Kubernetes resources. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.</description>
    </item>
    
    <item>
      <title>Frequently Asked Questions</title>
      <link>https://frisbee.dev/docs/troubleshooting/faq/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/troubleshooting/faq/</guid>
      <description>Deployment Q: The service seems fine, but I get a Failed message. The service run in a Pod that may host multiple containers. The application contrainer, the telemetry container, and so on. Given that, if the application seems fine, it is perhaps one of the sidecar containers that has failed.
Q: I changed some templates, but the changes does not seem to affect the Test Plan. The changes are local and must be posted to the Kubernetes API.</description>
    </item>
    
    <item>
      <title>Frisbee Overview</title>
      <link>https://frisbee.dev/docs/about/overview/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/about/overview/</guid>
      <description>Frisbee Overview Frisbee is an open source cloud-native platform intended for engineers and researchers looking to explore, test, and benchmark distributed applications faster and more reliably. It offers various types of fault simulation and has an enormous capability to orchestrate complex scenarios in the domains of:
Cloud Databases Federated Learning Frameworks Telecommunication services Blockchain applications IoT applications Core Strengths Unlike all prior tools, Frisbee delivers a fully automated testing environment.</description>
    </item>
    
    <item>
      <title>Tools for debugging</title>
      <link>https://frisbee.dev/docs/troubleshooting/tools/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/troubleshooting/tools/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Chart Guide</title>
      <link>https://frisbee.dev/docs/chart-guide/deploy/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/chart-guide/deploy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Basic Features</title>
      <link>https://frisbee.dev/docs/about/features/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/about/features/</guid>
      <description>This document describes the basic features of Frisbee, including Actions, Testing Workflows, Visualized Operations, and Security Guarantees.
Actions An Action is the key to defining a DSL for replaying complex workloads. Frisbee covers a full range of actions required to test a distributed system, and consists of five comprehensive and fine-grained components: templates, services, clusters, faults, and calls.
Templates: Templates define minimally constraining skeletons. When called with `input&#39; parameters, templates generate the customized configuration by replacing the placeholders with the given input.</description>
    </item>
    
    <item>
      <title>Install Frisbee</title>
      <link>https://frisbee.dev/docs/getting-started/installing/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/installing/</guid>
      <description>There is lots of talk about &amp;quot;Hugo being written in Go&amp;quot;, but you don&#39;t need to install Go to enjoy Hugo. Just grab a precompiled binary!
Hugo is written in Go with support for multiple platforms. The latest release can be found at Hugo Releases.
Hugo currently provides pre-built binaries for the following:
macOS (Darwin) for x64, i386, and ARM architectures Windows Linux OpenBSD FreeBSD Hugo may also be compiled from source wherever the Go toolchain can run; e.</description>
    </item>
    
    <item>
      <title>Basic Usage</title>
      <link>https://frisbee.dev/docs/getting-started/usage/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/usage/</guid>
      <description>The following is a description of the most common commands you will use while developing your Hugo project. See the Command Line Reference for a comprehensive view of Hugo&#39;s CLI.
Test Installation Once you have installed Hugo, make sure it is in your PATH. You can test that Hugo has been installed correctly via the help command:
hugo help The output you see in your console should be similar to the following:</description>
    </item>
    
    <item>
      <title>Apache License</title>
      <link>https://frisbee.dev/docs/about/license/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/about/license/</guid>
      <description>Version 2.0, January 2004 https://www.apache.org/licenses/LICENSE-2.0
Terms and Conditions for use, reproduction, and distribution
1. Definitions “License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
“Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.
“Legal Entity” shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity.</description>
    </item>
    
    <item>
      <title>Configure Hugo</title>
      <link>https://frisbee.dev/docs/getting-started/configuration/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/getting-started/configuration/</guid>
      <description>Configuration File </description>
    </item>
    
    <item>
      <title></title>
      <link>https://frisbee.dev/docs/chart-guide/code-developer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frisbee.dev/docs/chart-guide/code-developer/</guid>
      <description>Guide for the Frisbee Platform Developers Change the Code Make a new release Step 1: Change the version in the VERSION file Step 2: Update the controller&#39;s container Step 3: Update the Github repo Step 4: Create GitHub release Step 5: Validate release Change the Code # Fetch Frisbee &amp;gt;&amp;gt; git clone git@github.com:CARV-ICS-FORTH/frisbee.git &amp;gt;&amp;gt; cd frisbee There are two ways to run a Frisbee controller.
As Go program outside a cluster.</description>
    </item>
    
  </channel>
</rss>
